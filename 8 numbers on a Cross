#include <iostream>
#include <cmath>
using namespace std;

// Returns true if the number written in square c is ok.
bool isSafe(int board[], int currentCol) {
   static int neighbors[8][5] = { {-1},               // 0  Neighbor list for each square
                                  {0, -1},            // 1
                                  {0, 1, -1},         // 2  The cross with the squares labeled:
                                  {0, 2, -1},         // 3                  1 4
                                  {1, 2, -1},         // 4                0 2 5 7
                                  {1, 2, 3, 4, -1},   // 5                  3 6
                                  {2, 3, 5, -1},      // 6
                                  {4, 5, 6, -1}     }; // 7

   for (int i = 0; i < currentCol; ++i) // If the number in the current column has already been used, return false.
      if (board[i] == board[currentCol])
         return false;

   for (int i = 0; neighbors[currentCol][i] != -1; ++i) // For each neighbor of the current column,
      if (abs(board[currentCol] - board[neighbors[currentCol][i]]) == 1) // if the numbers differ by 1, return false.
         return false;
   return true;
}

void printSolution(int board[]) {
   static int solutionCount = 0;
   cout << "Solution #" << ++solutionCount << "\n";
   cout << " " << board[1] << board[4] << "\n";
   cout << board[0] << board[2] << board[5] << board[7] << "\n";
   cout << " " << board[3] << board[6] << "\n\n";
}

void placeQueens(int board[], int currentCol) {
   if (currentCol == 8)
      printSolution(board);
   else
      for (board[currentCol] = 1; board[currentCol] <= 8; ++board[currentCol])
         if (isSafe(board, currentCol))
            placeQueens(board, currentCol + 1);
}

int main() {
   int board[8];
   placeQueens(board, 0);
   return 0;
}
