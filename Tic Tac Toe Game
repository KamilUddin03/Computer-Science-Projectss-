#include <iostream>
#include <vector>

class TicTacToe {
private:
    std::vector<std::vector<char>> board;
    char currentPlayer;

public:
    TicTacToe() : board(3, std::vector<char>(3, ' ')), currentPlayer('X') {}

    void printBoard() const {
        for (int i = 0; i < 3; ++i) {
            for (int j = 0; j < 3; ++j) {
                std::cout << board[i][j];
                if (j < 2) {
                    std::cout << " | ";
                }
            }
            std::cout << "\n";
            if (i < 2) {
                std::cout << "---------\n";
            }
        }
    }

    bool makeMove(int row, int col) {
        if (row < 0 || row >= 3 || col < 0 || col >= 3 || board[row][col] != ' ') {
            return false;  // Invalid move
        }

        board[row][col] = currentPlayer;
        currentPlayer = (currentPlayer == 'X') ? 'O' : 'X';  // Switch player

        return true;  // Valid move
    }

    char checkWinner() const {
        // Check rows and columns
        for (int i = 0; i < 3; ++i) {
            if (board[i][0] == board[i][1] && board[i][1] == board[i][2] && board[i][0] != ' ') {
                return board[i][0];  // Row winner
            }
            if (board[0][i] == board[1][i] && board[1][i] == board[2][i] && board[0][i] != ' ') {
                return board[0][i];  // Column winner
            }
        }

        // Check diagonals
        if (board[0][0] == board[1][1] && board[1][1] == board[2][2] && board[0][0] != ' ') {
            return board[0][0];  // Diagonal winner (top-left to bottom-right)
        }
        if (board[0][2] == board[1][1] && board[1][1] == board[2][0] && board[0][2] != ' ') {
            return board[0][2];  // Diagonal winner (top-right to bottom-left)
        }

        return ' ';  // No winner
    }

    bool isBoardFull() const {
        for (const auto& row : board) {
            for (char cell : row) {
                if (cell == ' ') {
                    return false;  // There is an empty cell
                }
            }
        }
        return true;  // The board is full
    }

    char getCurrentPlayer() const {
        return currentPlayer;
    }
};

int main() {
    TicTacToe game;

    while (true) {
        // Print the current state of the board
        std::cout << "Current board:\n";
        game.printBoard();

        // Get player move
        int row, col;
        std::cout << "Player " << game.getCurrentPlayer() << ", enter your move (row and column): ";
        std::cin >> row >> col;

        // Make the move and check for a winner
        if (game.makeMove(row, col)) {
            char winner = game.checkWinner();
            if (winner != ' ') {
                std::cout << "Player " << winner << " wins!\n";
                break;
            } else if (game.isBoardFull()) {
                std::cout << "It's a tie!\n";
                break;
            }
        } else {
            std::cout << "Invalid move. Try again.\n";
        }
    }

    return 0;
}

